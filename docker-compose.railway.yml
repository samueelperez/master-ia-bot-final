version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-crypto_bot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_bot_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_bot}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis para cach√© y sesiones
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.secure
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crypto_bot}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-crypto_bot_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BACKEND_API_SECRET_KEY=${BACKEND_API_SECRET_KEY}
      - BACKEND_RATE_LIMIT_PER_MINUTE=${BACKEND_RATE_LIMIT_PER_MINUTE:-60}
      - BACKEND_RATE_LIMIT_PER_HOUR=${BACKEND_RATE_LIMIT_PER_HOUR:-1000}
      - BACKEND_ALLOWED_ORIGINS=${BACKEND_ALLOWED_ORIGINS:-*}
      - BACKEND_ALLOWED_HOSTS=${BACKEND_ALLOWED_HOSTS:-*}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # AI Module
  ai-module:
    build:
      context: ./src/ai-module
      dockerfile: Dockerfile.secure
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - ECONOMIC_CALENDAR_API_KEY=${ECONOMIC_CALENDAR_API_KEY}
      - BACKEND_URL=http://backend:8000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crypto_bot}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-crypto_bot_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      - RATE_LIMIT_PER_HOUR=${RATE_LIMIT_PER_HOUR:-1000}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
    ports:
      - "9004:9004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Service
  data-service:
    build:
      context: ./src/data-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crypto_bot}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-crypto_bot_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - ECONOMIC_CALENDAR_API_KEY=${ECONOMIC_CALENDAR_API_KEY}
      - SECRET_KEY=${DATA_SERVICE_SECRET_KEY}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-*}
    ports:
      - "9005:9005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Telegram Bot
  telegram-bot:
    build:
      context: ./src/telegram-bot
      dockerfile: Dockerfile.secure
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - AI_MODULE_URL=http://ai-module:9004
      - BACKEND_URL=http://backend:8000
      - DATA_SERVICE_URL=http://data-service:9005
      - TELEGRAM_AUTHORIZED_USERS=${TELEGRAM_AUTHORIZED_USERS}
      - TELEGRAM_ADMIN_USERS=${TELEGRAM_ADMIN_USERS}
      - REQUIRE_REFERRAL_VERIFICATION=${REQUIRE_REFERRAL_VERIFICATION}
      - VERIFICATION_DB=${VERIFICATION_DB}
      - MEMORY_DB=${MEMORY_DB}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crypto_bot}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-crypto_bot_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TELEGRAM_AUTHORIZED_USERS=${TELEGRAM_AUTHORIZED_USERS}
      - TELEGRAM_ADMIN_USERS=${TELEGRAM_ADMIN_USERS}
      - TELEGRAM_RATE_LIMIT_PER_MINUTE=${TELEGRAM_RATE_LIMIT_PER_MINUTE:-30}
      - TELEGRAM_RATE_LIMIT_PER_HOUR=${TELEGRAM_RATE_LIMIT_PER_HOUR:-300}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-module:
        condition: service_healthy
      backend:
        condition: service_healthy
      data-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://ai-module:9004/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Webapp (Next.js)
  webapp:
    build:
      context: ./src/webapp
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
      - NEXT_PUBLIC_AI_MODULE_URL=${NEXT_PUBLIC_AI_MODULE_URL:-http://ai-module:9004}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
      ai-module:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge 