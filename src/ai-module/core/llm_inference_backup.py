import os
import sys
import traceback
import time
import json
from typing import List, Dict, Any, Optional, Tuple

# Cargar variables de entorno desde .env
    try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Variables de entorno cargadas desde .env")
except ImportError:
    print("‚ö†Ô∏è python-dotenv no disponible, usando variables de entorno del sistema")

# Dependencias externas (aseg√∫rate de instalarlas en tu entorno)
    try:
    import httpx  # type: ignore
except ImportError:
    httpx = None

    try:
    import uvicorn  # type: ignore
except ImportError:
    uvicorn = None

    try:
    from fastapi import FastAPI, HTTPException  # type: ignore
    from fastapi.middleware.cors import CORSMiddleware  # type: ignore
except ImportError:
    FastAPI = None  # type: ignore
    HTTPException = Exception  # type: ignore
    CORSMiddleware = None  # type: ignore

    try:
    from pydantic import BaseModel  # type: ignore
except ImportError:
    BaseModel = object  # type: ignore

    try:
    from openai import OpenAI  # type: ignore
except ImportError:
    OpenAI = None  # type: ignore

# Importar sistema de estrategias
    try:
    from strategies.signal_generator import SignalGenerator
    from strategies.strategy_engine import StrategyEngine
    STRATEGIES_AVAILABLE = True
    print("üéØ Sistema de estrategias avanzadas disponible")
except ImportError as e:
    STRATEGIES_AVAILABLE = False
    print(f"‚ö†Ô∏è Sistema de estrategias no disponible: {e}")

# Importar servicios de datos externos
    try:
    from services.external_data.data_integration_service import get_formatted_data_for_prompt
    EXTERNAL_DATA_AVAILABLE = True
    # print("Servicios de datos externos disponibles")
except ImportError as e:
    # Intentar importar desde la ruta relativa
    try:
        import sys
        import os
        # A√±adir el directorio actual al path
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        from services.external_data.data_integration_service import get_formatted_data_for_prompt
        EXTERNAL_DATA_AVAILABLE = True
        # print("Servicios de datos externos disponibles (importaci√≥n relativa)")
    except ImportError as e2:
        EXTERNAL_DATA_AVAILABLE = False
        # print(f"Servicios de datos externos no disponibles: {e2}")

# A√±adir directorio ra√≠z para importaciones backend
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(ROOT_DIR))

# Importar servicios de backend, si est√°n disponibles
    try:
    from backend.app.services.fetcher import fetch_ohlcv
    from backend.app.services.ta_service import compute_indicators
    BACKEND_AVAILABLE = True
    # print("Backend disponible: servicios importados correctamente")
except ImportError as e:
    BACKEND_AVAILABLE = False
    # print(f"Backend no disponible: {e}")

# Configuraci√≥n de entorno
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

if not OPENAI_API_KEY:
    print("‚ö†Ô∏è OPENAI_API_KEY no encontrada. Funcionar√° en modo limitado.")
    OPENAI_API_KEY = None

# Inicializar FastAPI
if OPENAI_API_KEY:
    token_preview = OPENAI_API_KEY[:4] + '...' + OPENAI_API_KEY[-4:]
    print(f"Iniciando servicio con API Key: {token_preview} y BACKEND_URL: {BACKEND_URL}")
else:
    print(f"Iniciando servicio sin API Key (modo limitado) y BACKEND_URL: {BACKEND_URL}")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inicializar cliente seg√∫n el formato de la API key
USE_ANTHROPIC = False
client = None

# Inicializar cliente OpenAI
if OPENAI_API_KEY:
    try:
        # Usar la API key de OpenAI proporcionada
        client = OpenAI(api_key=OPENAI_API_KEY)
        print("Cliente OpenAI inicializado correctamente.")
        USE_ANTHROPIC = False
    except Exception as e:
        print(f"Error al inicializar OpenAI: {e}")
        client = None
else:
    print("Cliente OpenAI no disponible - funcionando en modo fallback")

# Inicializar sistema de estrategias
signal_generator = None
if STRATEGIES_AVAILABLE:
    try:
        signal_generator = SignalGenerator()
        print("‚úÖ Sistema de estrategias inicializado correctamente")
    except Exception as e:
        print(f"‚ùå Error inicializando sistema de estrategias: {e}")
        signal_generator = None

# Modelos de datos
class AnalyzeRequest(BaseModel):
    symbol: str
    timeframes: List[str]
    user_prompt: str = ""

class SignalRequest(BaseModel):
    symbol: str
    timeframe: str = "1d"
    strategy_name: Optional[str] = None

class FullPromptRequest(BaseModel):
    prompt: str
    user_context: Optional[str] = None
    conversation_history: Optional[List[Dict[str, str]]] = []

# Precios de fallback
FALLBACK_PRICES: Dict[str, float] = {
    "BTC": 50000.0,
    "ETH": 2000.0,
    "SOL": 20.0,
}

async def fetch_price_coingecko(symbol: str) -> Optional[float]:
    """
    Implementaci√≥n de ejemplo para solicitar el precio a CoinGecko.
    """
    if not httpx:
        return None
    coin_id = symbol.lower()
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url)
            resp.raise_for_status()
            data = resp.json()
            return float(data.get(coin_id, {}).get("usd", 0))
    except Exception:
        return None

async def fetch_price_backend(symbol: str) -> Optional[float]:
    """
    Solicita precio al backend si est√° disponible.
    """
    if not BACKEND_AVAILABLE:
        return None
    try:
        df = fetch_ohlcv(symbol, timeframe='1m', limit=1)
        return float(df['close'].iloc[-1])
    except Exception:
        return None

async def fetch_price_binance(symbol: str) -> Optional[float]:
    """
    Solicita precio a Binance directamente.
    """
    if not httpx:
        return None
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}USDT"
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url)
            resp.raise_for_status()
            return float(resp.json().get("price", 0))
    except Exception:
        return None

async def get_current_price(symbol: str) -> float:
    """
    Obtiene el precio actual mediante varias fuentes con fallback.
    """
    for fetcher in (fetch_price_coingecko, fetch_price_backend, fetch_price_binance):
        try:
            price = await fetcher(symbol)
            if price and price > 0:
                return price
        except Exception:
            continue
    return FALLBACK_PRICES.get(symbol.upper(), 0.0)

async def get_historical_data(symbol: str, timeframe: str, limit: int = 100) -> Dict[str, List[Any]]:
    """
    Obtiene datos OHLCV del backend o directamente de Binance si el backend no est√° disponible.
    """
    try:
        # 1. Intentar obtener datos del backend
        if BACKEND_AVAILABLE:
            print(f"Solicitando datos OHLCV para {symbol} en timeframe {timeframe}")
            try:
                df = fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
                if not df.empty:
                    print(f"Datos obtenidos correctamente: {len(df)} filas")
                    return {
                        "open": df["open"].tolist(),
                        "high": df["high"].tolist(),
                        "low": df["low"].tolist(),
                        "close": df["close"].tolist(),
                        "volume": df["volume"].tolist()
                    }
                else:
                    print(f"No se obtuvieron datos para {symbol} en {timeframe}")
            except Exception as e:
                print(f"Error al obtener datos OHLCV del backend: {e}")
                traceback.print_exc()
        
        # 2. Si el backend no est√° disponible o fall√≥, intentar obtener datos directamente de Binance
        print("Intentando obtener datos directamente de Binance")
        try:
            # Mapeo de timeframes a formato de Binance
            binance_timeframe_map = {
                "1m": "1m", "5m": "5m", "15m": "15m", "30m": "30m",
                "1h": "1h", "4h": "4h", "1d": "1d", "1w": "1w"
            }
            
            binance_tf = binance_timeframe_map.get(timeframe, "1h")
            url = f"https://api.binance.com/api/v3/klines?symbol={symbol}USDT&interval={binance_tf}&limit={limit}"
            
            async with httpx.AsyncClient(timeout=10) as client:
                resp = await client.get(url)
                resp.raise_for_status()
                data = resp.json()
                
                if data:
                    # Convertir datos de Binance al formato requerido
                    # Formato Binance: [timestamp, open, high, low, close, volume, ...]
                    opens = [float(item[1]) for item in data]
                    highs = [float(item[2]) for item in data]
                    lows = [float(item[3]) for item in data]
                    closes = [float(item[4]) for item in data]
                    volumes = [float(item[5]) for item in data]
                    
                    print(f"Datos obtenidos de Binance: {len(data)} puntos")
                    return {
                        "open": opens,
                        "high": highs,
                        "low": lows,
                        "close": closes,
                        "volume": volumes
                    }
        except Exception as e:
            print(f"Error al obtener datos de Binance: {e}")
            traceback.print_exc()
        
        # Si llegamos aqu√≠, no se pudieron obtener datos
        print(f"No se pudieron obtener datos hist√≥ricos para {symbol} en {timeframe}")
        return {}
    except Exception as e:
        print(f"Error general al obtener datos hist√≥ricos: {e}")
        traceback.print_exc()
        return {}

def calculate_basic_indicators(historical_data: Dict[str, List[Any]]) -> Dict[str, Any]:
    """
    Calcula indicadores t√©cnicos b√°sicos cuando el backend no est√° disponible.
    """
    result = {}
    
    try:
        closes = historical_data.get("close", [])
        if not closes:
            return {}
        
        # Calcular RSI (Relative Strength Index)
        try:
            # Implementaci√≥n simple de RSI
            gains = []
            losses = []
            
            for i in range(1, len(closes)):
                change = closes[i] - closes[i-1]
                if change >= 0:
                    gains.append(change)
                    losses.append(0)
                else:
                    gains.append(0)
                    losses.append(abs(change))
            
            if not gains or not losses:
                result["rsi"] = 50  # Valor neutral si no hay suficientes datos
            else:
                avg_gain = sum(gains) / len(gains)
                avg_loss = sum(losses) / len(losses)
                
                if avg_loss == 0:
                    result["rsi"] = 100
                else:
                    rs = avg_gain / avg_loss
                    result["rsi"] = 100 - (100 / (1 + rs))
                
                print(f"RSI calculado: {result['rsi']}")
        except Exception as e:
            print(f"Error al calcular RSI: {e}")
            traceback.print_exc()
        
        # Calcular MACD (Moving Average Convergence Divergence)
        try:
            # Implementaci√≥n simple de MACD
            if len(closes) >= 26:
                # EMA 12
                ema12 = sum(closes[-12:]) / 12
                # EMA 26
                ema26 = sum(closes[-26:]) / 26
                
                macd_line = ema12 - ema26
                # Signal line (EMA 9 del MACD)
                signal_line = macd_line  # Simplificado, normalmente ser√≠a EMA de 9 per√≠odos del MACD
                histogram = macd_line - signal_line
                
                result["macd"] = {
                    "macd_line": macd_line,
                    "signal_line": signal_line,
                    "histogram": histogram
                }
                
                print(f"MACD calculado: {result['macd']}")
        except Exception as e:
            print(f"Error al calcular MACD: {e}")
            traceback.print_exc()
        
        # Calcular volumen promedio
        try:
            volumes = historical_data.get("volume", [])
            if volumes:
                avg_volume = sum(volumes) / len(volumes)
                result["volume_avg"] = avg_volume
                print(f"Volumen promedio calculado: {result['volume_avg']}")
        except Exception as e:
            print(f"Error al calcular volumen promedio: {e}")
            traceback.print_exc()
        
        return result
    except Exception as e:
        print(f"Error general al calcular indicadores b√°sicos: {e}")
        traceback.print_exc()
        return {}

async def get_technical_indicators(symbol: str, timeframe: str) -> Dict[str, Any]:
    """
    Calcula indicadores t√©cnicos usando backend o fallback.
    """
    try:
        historical = await get_historical_data(symbol, timeframe)
        if BACKEND_AVAILABLE:
            try:
                return compute_indicators(historical)
            except Exception as e:
                print(f"Error al calcular indicadores con backend: {e}")
                traceback.print_exc()
                print("Usando c√°lculo b√°sico de indicadores como fallback")
                return calculate_basic_indicators(historical)
        else:
            print("Backend no disponible, usando c√°lculo b√°sico de indicadores")
            return calculate_basic_indicators(historical)
    except Exception as e:
        print(f"Error en get_technical_indicators: {e}")
        traceback.print_exc()
        return {}

async def determine_needed_data(prompt: str) -> Dict[str, Any]:
    """
    Usa la IA para determinar qu√© datos se necesitan para responder a la consulta.
    """
    # Primero, intentar extraer informaci√≥n b√°sica mediante reglas simples
    # Lista de s√≠mbolos comunes y sus variantes
    symbol_variants = {
        "BTC": ["btc", "bitcoin", "bitcoins", "xbt"],
        "ETH": ["eth", "ethereum", "ether"],
        "SOL": ["sol", "solana"],
        "XRP": ["xrp", "ripple"],
        "ADA": ["ada", "cardano"],
        "DOGE": ["doge", "dogecoin"],
        "SHIB": ["shib", "shiba", "shibainu"],
        "BNB": ["bnb", "binance", "binancecoin"],
        "DOT": ["dot", "polkadot"],
        "AVAX": ["avax", "avalanche"]
    }
    
    # Buscar s√≠mbolos en el prompt
    detected_symbol = None
    for symbol, variants in symbol_variants.items():
        if any(variant in prompt.lower() for variant in variants):
            detected_symbol = symbol
            break
    
    # Buscar timeframes comunes
    timeframe_patterns = ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1M"]
    detected_timeframe = None
    for tf in timeframe_patterns:
        if tf in prompt:
            detected_timeframe = tf
            break
    
    # Palabras clave que sugieren un an√°lisis
    analysis_keywords = [
        "analiza", "an√°lisis", "analizar", "an√°lisis t√©cnico", 
        "precio", "tendencia", "chart", "gr√°fico", "como est√°",
        "c√≥mo est√°", "dame informaci√≥n", "qu√© opinas", "que opinas",
        "mu√©strame", "muestrame", "dime sobre", "analizame", "anal√≠zame"
    ]
    
    # Verificar si parece ser una solicitud de an√°lisis
    is_analysis_request = any(keyword in prompt.lower() for keyword in analysis_keywords)
    
    # Usar la IA para un an√°lisis m√°s detallado
    system_prompt = (
        "Eres un asistente que analiza consultas sobre criptomonedas. "
        "Tu tarea es determinar qu√© datos t√©cnicos se necesitan para responder a la consulta del usuario. "
        "Responde SOLO con un objeto JSON que contenga los siguientes campos (solo si son relevantes):\n"
        "- symbol: s√≠mbolo de la criptomoneda (ej: BTC, ETH)\n"
        "- timeframe: marco temporal (ej: 5m, 1h, 1d)\n"
        "- indicators: lista de indicadores necesarios (ej: ['price', 'rsi', 'macd', 'volume'])\n"
        "- is_analysis: booleano que indica si se requiere un an√°lisis completo\n\n"
        "Ejemplo 1: Para 'Analiza Bitcoin en 4h', responder√≠as: "
        "{'symbol': 'BTC', 'timeframe': '4h', 'indicators': ['price', 'volume', 'rsi', 'macd'], 'is_analysis': true}\n\n"
        "Ejemplo 2: Para '¬øCu√°l es el precio actual de Ethereum?', responder√≠as: "
        "{'symbol': 'ETH', 'indicators': ['price'], 'is_analysis': false}\n\n"
        "Ejemplo 3: Para '¬øC√≥mo est√° el RSI de Bitcoin en 5 minutos?', responder√≠as: "
        "{'symbol': 'BTC', 'timeframe': '5m', 'indicators': ['rsi'], 'is_analysis': false}\n\n"
        "Ejemplo 4: Para 'analizame eth', responder√≠as: "
        "{'symbol': 'ETH', 'indicators': ['price', 'volume', 'rsi', 'macd'], 'is_analysis': true}\n\n"
        "Ejemplo 5: Para 'dame informaci√≥n sobre Solana', responder√≠as: "
        "{'symbol': 'SOL', 'indicators': ['price', 'volume', 'rsi', 'macd'], 'is_analysis': true}\n\n"
        "Ejemplo 6: Para 'qu√© opinas de DOGE ahora mismo', responder√≠as: "
        "{'symbol': 'DOGE', 'indicators': ['price', 'volume', 'rsi', 'macd'], 'is_analysis': true}"
    )
    
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": prompt}
    ]
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.1,  # Baja temperatura para respuestas m√°s deterministas
            max_tokens=150,
            response_format={"type": "json_object"}  # Forzar respuesta en formato JSON
        )
        
        result = json.loads(response.choices[0].message.content)
        
        # Si la IA no detect√≥ un s√≠mbolo pero nosotros s√≠, usamos el nuestro
        if not result.get("symbol") and detected_symbol:
            result["symbol"] = detected_symbol
            print(f"S√≠mbolo detectado manualmente: {detected_symbol}")
        
        # Si la IA no detect√≥ un timeframe, usamos el detectado manualmente o '1h' como predeterminado
        if not result.get("timeframe"):
            if detected_timeframe:
                result["timeframe"] = detected_timeframe
                print(f"Timeframe detectado manualmente: {detected_timeframe}")
            else:
                result["timeframe"] = "1h"  # Timeframe predeterminado cuando no se especifica
                print(f"Usando timeframe predeterminado: 1h")
        
        # Si la IA no clasific√≥ como an√°lisis pero parece serlo, lo marcamos como tal
        if not result.get("is_analysis") and is_analysis_request:
            result["is_analysis"] = True
            # Asegurarnos de que tenga los indicadores necesarios para un an√°lisis
            if "indicators" not in result or not result["indicators"]:
                result["indicators"] = ["price", "volume", "rsi", "macd"]
            print(f"Solicitud de an√°lisis detectada manualmente")
        
        print(f"Resultado final de determine_needed_data: {result}")
        return result
    except Exception as e:
        print(f"Error al determinar datos necesarios: {e}")
        # Fallback con detecci√≥n manual
        indicators = ["price"]
        if is_analysis_request:
            indicators = ["price", "volume", "rsi", "macd"]
        
        return {
            "symbol": detected_symbol, 
            "timeframe": detected_timeframe or "1h",  # Timeframe predeterminado: 1h
            "indicators": indicators, 
            "is_analysis": is_analysis_request
        }

async def fetch_requested_data(needed_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Obtiene los datos solicitados del backend.
    """
    result = {}
    symbol = needed_data.get("symbol")
    timeframe = needed_data.get("timeframe", "1d")
    indicators = needed_data.get("indicators", [])
    
    if not symbol:
        return {"error": "No se pudo determinar el s√≠mbolo de la criptomoneda"}
    
    # Obtener precio actual si se solicita
    if "price" in indicators:
        try:
            result["price"] = await get_current_price(symbol)
        except Exception as e:
            print(f"Error al obtener precio: {e}")
            return {"error": "No se pudo obtener el precio actual"}
    
    # Obtener datos hist√≥ricos si se necesitan para indicadores
    if any(ind in indicators for ind in ["rsi", "macd", "volume", "sma", "ema"]):
        try:
            historical_data = await get_historical_data(symbol, timeframe)
            print(f"Datos hist√≥ricos obtenidos para {symbol} en {timeframe}: {len(historical_data.get('close', []))} puntos")
            
            if not historical_data or not historical_data.get('close'):
                return {"error": f"No se pudieron obtener datos hist√≥ricos para {symbol} en timeframe {timeframe}"}
            
            # Calcular indicadores solicitados
            try:
                if BACKEND_AVAILABLE:
                    try:
                        technical_indicators = compute_indicators(historical_data)
                        print(f"Indicadores calculados con backend: {technical_indicators.keys()}")
                    except Exception as e:
                        print(f"Error al calcular indicadores con backend: {e}")
                        technical_indicators = calculate_basic_indicators(historical_data)
                        print(f"Indicadores calculados con m√©todo b√°sico: {technical_indicators.keys()}")
                else:
                    technical_indicators = calculate_basic_indicators(historical_data)
                    print(f"Backend no disponible, indicadores calculados con m√©todo b√°sico: {technical_indicators.keys()}")
                
                # Mapear indicadores que tienen nombres diferentes
                indicator_mapping = {
                    "volume": "volume_avg"  # Si se solicita 'volume', usar 'volume_avg'
                }
                
                for indicator in indicators:
                    if indicator in technical_indicators:
                        result[indicator] = technical_indicators[indicator]
                    elif indicator in indicator_mapping and indicator_mapping[indicator] in technical_indicators:
                        # Usar el indicador alternativo si est√° disponible
                        result[indicator] = technical_indicators[indicator_mapping[indicator]]
                        print(f"Usando {indicator_mapping[indicator]} como alternativa para {indicator}")
                    else:
                        print(f"Indicador {indicator} no disponible en los resultados")
            except Exception as e:
                print(f"Error al calcular indicadores: {e}")
                traceback.print_exc()
                return {"error": f"Error al calcular indicadores: {str(e)}"}
        except Exception as e:
            print(f"Error al procesar indicadores: {e}")
            traceback.print_exc()
            return {"error": f"Error al calcular indicadores: {str(e)}"}
    
    # Verificar si hay indicadores solicitados que no se obtuvieron
    missing_indicators = []
    for ind in indicators:
        if ind not in result and ind != "price":
            missing_indicators.append(ind)
    
    if missing_indicators:
        return {"error": f"No se pudieron obtener los siguientes indicadores: {', '.join(missing_indicators)}"}
    
    return {
        "symbol": symbol,
        "timeframe": timeframe,
        "data": result,
        "is_analysis": needed_data.get("is_analysis", False)
    }

async def generate_response_with_data(prompt: str, data_context: Dict[str, Any], conversation_history: List[Dict[str, str]]) -> Dict[str, Any]:
    """
    Genera una respuesta basada en los datos obtenidos.
    """
    is_analysis = data_context.get("is_analysis_request", False)
    symbol = data_context.get("symbol")
    timeframe = data_context.get("timeframe")
    
    # Detectar saludos y preguntas conversacionales comunes
    greeting_patterns = [
        "hola", "hey", "saludos", "buenas", "qu√© tal", "que tal", 
        "c√≥mo est√°s", "como estas", "qu√© hay", "que hay"
    ]
    
    # Verificar si es un saludo simple
    is_greeting = any(pattern in prompt.lower() for pattern in greeting_patterns)
    
    if is_greeting:
        # Respuesta amigable para saludos con emojis
        responses = [
            "¬°Hola! üëã Soy tu asistente de criptomonedas. ‚ú® ¬øEn qu√© puedo ayudarte hoy? Puedes pedirme an√°lisis como 'analiza Bitcoin' üìä o 'c√≥mo est√° ETH' üìà",
            "¬°Hey! üòé Estoy aqu√≠ para ayudarte con an√°lisis de criptomonedas. üöÄ Prueba a preguntarme sobre BTC, ETH o cualquier otra cripto. ¬øQu√© quieres saber? üí∞",
            "¬°Saludos! üåü Soy tu analista de criptomonedas favorito. ü§ñ Puedo darte informaci√≥n sobre precios üí≤, tendencias üìà y an√°lisis t√©cnico. ¬øQu√© te gustar√≠a saber hoy? üîç",
            "¬°Hola! üéØ ¬øListo para explorar el mundo cripto? üåç Preg√∫ntame sobre cualquier criptomoneda y te dar√© un an√°lisis detallado. ¬°Vamos a ello! üí™",
            "¬°Qu√© tal! üåà Tu experto en criptomonedas est√° listo para ayudarte. üß† ¬øQuieres saber sobre Bitcoin? ¬øEthereum? ¬øO tal vez alguna altcoin? ¬°Preg√∫ntame lo que quieras! üöÄ"
        ]
        import random
        response = random.choice(responses)
        
        return {
            "is_analysis_request": False,
            "response_type": "conversation",
            "response": response
        }
    
    if "error" in data_context:
        # Si no es un saludo pero hay un error, dar una respuesta m√°s √∫til
        response = (
            "Parece que est√°s intentando tener una conversaci√≥n. Estoy especializado en an√°lisis de criptomonedas. "
            "Puedes preguntarme cosas como 'analiza Bitcoin', 'c√≥mo est√° ETH en 4h' o 'dame un an√°lisis de Solana'."
        )
        
        return {
            "is_analysis_request": False,
            "response_type": "conversation",
            "response": response
        }
    
    # Preparar contexto t√©cnico para la IA
    technical_context = f"""
    S√≠mbolo: {symbol}
    Timeframe: {timeframe or 'No especificado'}
    """
    
    # A√±adir datos obtenidos al contexto
    data = data_context.get("data", {})
    if data:
        technical_context += "\nDatos disponibles:\n"
        for key, value in data.items():
            technical_context += f"- {key}: {value}\n"
    
    # A√±adir datos externos si est√°n disponibles
    external_data = ""
    if EXTERNAL_DATA_AVAILABLE and symbol:
        try:
            # Obtener datos externos de manera as√≠ncrona
            external_data = await get_formatted_data_for_prompt(symbol)
            if external_data:
                technical_context += f"\n{external_data}\n"
        except Exception as e:
            print(f"Error al obtener datos externos: {e}")
            # No a√±adir nada si hay un error
    
    # Seleccionar el prompt del sistema seg√∫n el tipo de consulta
    if is_analysis:
        # Usar el prompt de an√°lisis completo
        system_prompt = (
            "Eres un asistente especializado en an√°lisis de criptomonedas para usuarios principiantes. "
            "Cuando te pidan analizar una criptomoneda, proporciona SIEMPRE:\n\n"
            "1. DIRECCI√ìN GENERAL: Indica claramente si la tendencia es alcista, bajista o lateral.\n\n"
            "2. AN√ÅLISIS GENERAL: Explica en 4-5 frases por qu√© has llegado a esa conclusi√≥n sobre la direcci√≥n. "
            "Usa lenguaje sencillo y evita jerga t√©cnica. Incluye:\n"
            "   - Patrones de precio visibles explicados de manera sencilla\n"
            "   - Confirmaci√≥n o divergencia del volumen (explica si el volumen respalda o contradice el movimiento del precio)\n"
            "   - Estado del RSI (sobrecompra >70, sobreventa <30, o zona neutral) en t√©rminos simples\n"
            "   - Se√±ales del MACD (impulso positivo/negativo) explicadas de forma sencilla\n"
            "   - Contexto relevante del mercado general y noticias importantes\n"
            "   - Si el timeframe es corto (1m, 5m, 15m), menciona que el an√°lisis es de muy corto plazo\n"
            "   - Si el timeframe es 1h, menciona brevemente la tendencia diaria (1d) como contexto adicional\n\n"
            "3. FACTORES FUNDAMENTALES: Incluye informaci√≥n sobre noticias relevantes, eventos econ√≥micos y tendencias en redes sociales que puedan afectar al precio. Menciona el sentimiento general en redes sociales (positivo, negativo o neutral) y c√≥mo podr√≠a influir en el precio.\n\n"
            "4. SOPORTES Y RESISTENCIAS: Identifica SIEMPRE 2-3 niveles clave para la temporalidad solicitada:\n"
            "   - Al menos 1-2 soportes importantes (explicando brevemente por qu√© son importantes)\n"
            "   - Al menos 1-2 resistencias importantes (explicando brevemente por qu√© son importantes)\n"
            "   - Usa n√∫meros concretos, no rangos demasiado amplios\n\n"
            "5. ESCENARIO PROBABLE: Describe brevemente qu√© podr√≠a ocurrir en los pr√≥ximos d√≠as/semanas seg√∫n la temporalidad analizada, considerando tanto factores t√©cnicos como fundamentales.\n\n"
            "6. VALIDEZ DEL ANALISIS: Especifica claramente para qu√© periodo aplica este an√°lisis.\n\n"
            "7. DISCLAIMER: Incluye siempre una advertencia sobre los riesgos de inversi√≥n.\n\n"
            "8. No menciones el marco temporal en el analisis.\n\n"
            "REGLAS ESTRICTAS DE FORMATO:\n\n"
            "1. NUNCA incluyas frases introductorias como '¬°Claro!', '¬°Por supuesto!', 'Aqu√≠ tienes', etc. Ve directo al formato.\n\n"
            "2. NUNCA menciones el timeframe en el texto del an√°lisis. NO escribas frases como 'En el timeframe de 5m' o 'En el marco de tiempo de 1h'. El timeframe ya est√° en el t√≠tulo.\n\n"
            "3. NO empieces con frases como 'Bitcoin se encuentra en un patr√≥n lateral' o 'Ethereum muestra una tendencia alcista'. La direcci√≥n ya est√° en la secci√≥n DIRECCI√ìN.\n\n"
            "4. Comienza el an√°lisis directamente con los patrones de precio, volumen, RSI, MACD, etc. sin mencionar la direcci√≥n ni el timeframe.\n\n"
            "5. NUNCA uses frases como 'Ethereum ha estado experimentando una tendencia bajista' o 'Bitcoin muestra una tendencia alcista'. Estas frases son redundantes.\n\n"
            "Usa este formato exacto con emojis:\n\n"
            "üìä AN√ÅLISIS DE [S√çMBOLO] ([TEMPORALIDAD])\n\n"
            "üìà DIRECCI√ìN: [ALCISTA/BAJISTA/LATERAL]\n\n"
            "üí° AN√ÅLISIS T√âCNICO:\n"
            "[An√°lisis general en 4-5 frases incluyendo patrones, volumen, RSI, MACD y contexto de mercado]\n\n"
            "üì∞ FACTORES FUNDAMENTALES:\n"
            "[An√°lisis de noticias, eventos econ√≥micos, datos macroeconomicos y tendencias en redes sociales relevantes para la criptomoneda]\n\n"
            "üîë NIVELES IMPORTANTES:\n"
            "- Soporte: $[PRECIO] ([breve explicaci√≥n])\n"
            "- Soporte: $[PRECIO] ([breve explicaci√≥n]) (si aplica)\n"
            "- Resistencia: $[PRECIO] ([breve explicaci√≥n])\n"
            "- Resistencia: $[PRECIO] ([breve explicaci√≥n]) (si aplica)\n\n"
            "üîÆ ESCENARIO PROBABLE:\n"
            "[Descripci√≥n del escenario m√°s probable considerando factores t√©cnicos y fundamentales]\n\n"
            "‚è±Ô∏è HORIZONTE TEMPORAL: [Periodo de validez del an√°lisis]\n\n"
            "‚ö†Ô∏è No es asesoramiento financiero.\n\n"
            "IMPORTANTE: SIEMPRE proporciona un an√°lisis completo con todos los elementos anteriores, independientemente del timeframe solicitado. Nunca respondas pidiendo m√°s datos o diciendo que necesitas informaci√≥n adicional, ya que todos los datos necesarios ya est√°n incluidos en el contexto t√©cnico proporcionado."
        )
    else:
        # Prompt para consultas espec√≠ficas
        system_prompt = (
            "Eres un asistente especializado en criptomonedas que responde consultas espec√≠ficas. "
            "Usa los datos proporcionados para dar una respuesta precisa y directa. "
            "Si te preguntan por un precio, incluye el valor exacto. "
            "Si te preguntan por un indicador t√©cnico como el RSI, proporciona su valor actual "
            "y explica brevemente qu√© significa ese valor (sobrecompra, sobreventa o neutral). "
            "Si no tienes acceso a los datos solicitados, indica claramente que no puedes "
            "proporcionar esa informaci√≥n en este momento debido a limitaciones t√©cnicas, "
            "y sugiere al usuario que intente m√°s tarde o que consulte una plataforma especializada. "
            "Nunca inventes datos ni proporciones aproximaciones cuando no tengas informaci√≥n precisa. "
            "Usa lenguaje sencillo y evita jerga t√©cnica innecesaria."
        )
    
    # Generar respuesta con OpenAI
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"{technical_context}\n\nUsuario pregunta: {prompt}"}
    ]
    
    # A√±adir historial de conversaci√≥n si existe
    if conversation_history:
        for msg in conversation_history:
            if len(messages) < 10:
                messages.append(msg)
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.6,
            max_tokens=500,
        )
        
        reply = response.choices[0].message.content.strip()
        
        return {
            "is_analysis_request": is_analysis,
            "response_type": "specific_data" if not is_analysis else "analysis",
            "symbol": symbol,
            "timeframe": timeframe,
            "data": data,
            "response": reply
        }
    except Exception as e:
        print(f"Error al generar respuesta: {e}")
        return {
            "is_analysis_request": False,
            "response_type": "error",
            "response": "Lo siento, no pude procesar tu consulta en este momento."
        }

@app.get('/health')
async def health() -> Dict[str, str]:
    return {"status": "ok"}

@app.post('/generate')
async def generate(req: AnalyzeRequest) -> Dict[str, Any]:
    if not req.symbol or not req.timeframes:
        raise HTTPException(status_code=400, detail="symbol y timeframes son obligatorios")
    symbol = req.symbol.upper()
    timeframe = req.timeframes[0]

    # Obtener precio actual (usar el proporcionado en la solicitud si est√° disponible)
    current_price = req.current_price if hasattr(req, 'current_price') and req.current_price else await get_current_price(symbol)
    indicators = await get_technical_indicators(symbol, timeframe)

    # Obtener datos externos si est√°n disponibles
    external_data = ""
    if EXTERNAL_DATA_AVAILABLE:
        try:
            external_data = await get_formatted_data_for_prompt(symbol)
            print(f"Datos externos obtenidos para {symbol}: {len(external_data)} caracteres")
        except Exception as e:
            print(f"Error al obtener datos externos: {e}")
            external_data = "No se pudieron obtener datos externos."

    # Usar IA para detectar tipo de solicitud incluyendo consultas conversacionales
    async def detect_request_type(prompt: str) -> str:
        """
        Usa IA para detectar si la solicitud es de an√°lisis, se√±al o consulta conversacional.
        Retorna: 'signal', 'analysis', o 'conversation'
        """
        detection_prompt = (
            "Analiza esta consulta sobre criptomonedas y determina si el usuario est√° pidiendo:\n"
            "- 'signal': Una se√±al de trading con niveles espec√≠ficos (entrada, stop loss, take profit)\n"
            "- 'analysis': Un an√°lisis general de la criptomoneda (tendencia, indicadores, contexto)\n"
            "- 'conversation': Una consulta conversacional sobre una posici√≥n espec√≠fica o decisi√≥n de trading\n\n"
            "Ejemplos de SE√ëAL:\n"
            "- 'Dame una se√±al de BTC'\n"
            "- 'Necesito una se√±al de trading para ETH'\n"
            "- 'Se√±al para SOL en 30m'\n\n"
            "Ejemplos de AN√ÅLISIS:\n"
            "- 'Analiza Bitcoin'\n"
            "- 'C√≥mo est√° ETH'\n"
            "- 'An√°lisis de SOL'\n\n"
            "Ejemplos de CONVERSACI√ìN:\n"
            "- 'Compr√© BTC a $95,000, ¬øfue buena compra?'\n"
            "- 'Tengo ETH desde $3,200, ¬øqu√© hago?'\n"
            "- '¬øDeber√≠a vender mi SOL que compr√© a $180?'\n"
            "- 'Invert√≠ en DOGE a $0.30, ¬øc√≥mo ves la situaci√≥n?'\n\n"
            "Responde SOLO con 'signal', 'analysis' o 'conversation'.\n\n"
            f"Consulta del usuario: '{prompt}'"
        )
        
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": detection_prompt}],
                temperature=0.1,
                max_tokens=15
            )
            
            result = response.choices[0].message.content.strip().lower()
            if 'signal' in result:
                return 'signal'
            elif 'conversation' in result:
                return 'conversation'
            else:
                return 'analysis'
        except Exception as e:
            print(f"Error en detecci√≥n autom√°tica: {e}")
            # Fallback a detecci√≥n por palabras clave
            signal_keywords = ["dame una se√±al", "se√±al de trading", "se√±al para", "dame se√±al", 
                             "generar se√±al", "necesito una se√±al", "quiero una se√±al", "dame la se√±al", 
                             "se√±al de", "trading signal", "signal", "dame una se√±al de trading"]
            conversation_keywords = ["compr√©", "tengo", "invert√≠", "deber√≠a vender", "fue buena compra", 
                                   "qu√© hago", "c√≥mo ves", "entrada a", "posici√≥n en", "holdeo"]
            
            if any(keyword in prompt.lower() for keyword in signal_keywords):
                return 'signal'
            elif any(keyword in prompt.lower() for keyword in conversation_keywords):
                return 'conversation'
            else:
                return 'analysis'
    
    async def extract_conversation_info(prompt: str) -> Dict[str, Any]:
        """
        Extrae informaci√≥n de consultas conversacionales (s√≠mbolo, precio de compra, etc.)
        """
        extraction_prompt = (
            "Extrae la siguiente informaci√≥n de esta consulta sobre criptomonedas:\n"
            "1. S√≠mbolo de la criptomoneda (BTC, ETH, SOL, etc.)\n"
            "2. Precio de compra mencionado (si existe)\n"
            "3. Tipo de consulta (compra_pasada, decision_venta, evaluacion_posicion, etc.)\n\n"
            "Responde en formato JSON con las claves: symbol, purchase_price, query_type\n"
            "Si no encuentras alg√∫n dato, usa null.\n\n"
            f"Consulta: '{prompt}'"
        )
        
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": extraction_prompt}],
                temperature=0.1,
                max_tokens=100
            )
            
            import json
            result = json.loads(response.choices[0].message.content.strip())
            return result
        except Exception as e:
            print(f"Error extrayendo informaci√≥n conversacional: {e}")
            # Fallback manual
            import re
            
            # Buscar s√≠mbolo
            symbols = ["BTC", "ETH", "SOL", "XRP", "ADA", "DOT", "DOGE", "SHIB", "MATIC", "AVAX", "LINK"]
            symbol = None
            for sym in symbols:
                if sym.lower() in prompt.lower() or sym in prompt:
                    symbol = sym
                    break
            
            # Buscar precio
            price_match = re.search(r'[\$]?([0-9]{1,6}[,.]?[0-9]*)', prompt)
            purchase_price = float(price_match.group(1).replace(',', '')) if price_match else None
            
            return {
                "symbol": symbol,
                "purchase_price": purchase_price,
                "query_type": "evaluacion_posicion"
            }
    
    # Detectar tipo de solicitud usando IA
    request_type = await detect_request_type(req.user_prompt)
    is_signal_request = (request_type == 'signal')
    is_conversation_request = (request_type == 'conversation')
    
    # Logging para debug
    print(f"DEBUG: Prompt recibido: '{req.user_prompt}'")
    print(f"DEBUG: Tipo detectado por IA: {request_type}")
    print(f"DEBUG: Es solicitud de se√±al: {is_signal_request}")
    print(f"DEBUG: Es consulta conversacional: {is_conversation_request}")
    
    # Manejar consultas conversacionales
    if is_conversation_request:
        conversation_info = await extract_conversation_info(req.user_prompt)
        print(f"DEBUG: Informaci√≥n conversacional extra√≠da: {conversation_info}")
        
        # Usar el s√≠mbolo extra√≠do si est√° disponible
        if conversation_info.get('symbol'):
            symbol = conversation_info['symbol']
        
        # Obtener precio actual para comparaci√≥n
        current_price = await get_current_price(symbol)
        
        # Obtener indicadores t√©cnicos
        indicators = await get_technical_indicators(symbol, timeframe)
        
        # Calcular rentabilidad si hay precio de compra
        profit_loss_info = ""
        transaction_details = ""
        
        if conversation_info.get('transactions') and len(conversation_info['transactions']) > 1:
            # Informaci√≥n detallada de m√∫ltiples transacciones
            transactions = conversation_info['transactions']
            total_investment = sum(t['quantity'] * t['price'] for t in transactions)
            total_quantity = sum(t['quantity'] for t in transactions)
            breakeven_price = total_investment / total_quantity
            
            transaction_details = f"üìã RESUMEN DE TRANSACCIONES:\n"
            for i, t in enumerate(transactions, 1):
                transaction_details += f"   ‚Ä¢ Operaci√≥n {i}: {t['quantity']} unidades a ${t['price']:.2f}\n"
            transaction_details += f"   ‚Ä¢ Total invertido: ${total_investment:,.2f}\n"
            transaction_details += f"   ‚Ä¢ Total unidades: {total_quantity}\n"
            transaction_details += f"   ‚Ä¢ Precio promedio: ${breakeven_price:.2f}\n\n"
            
            if current_price:
                profit_loss = ((current_price - breakeven_price) / breakeven_price) * 100
                total_value = total_quantity * current_price
                profit_loss_amount = total_value - total_investment
                
                if profit_loss > 0:
                    profit_loss_info = f"üìà GANANCIA ACTUAL: +{profit_loss:.2f}% (+${profit_loss_amount:,.2f})\n"
                    profit_loss_info += f"   Valor actual: ${total_value:,.2f} | Inversi√≥n: ${total_investment:,.2f}\n\n"
                else:
                    profit_loss_info = f"üìâ P√âRDIDA ACTUAL: {profit_loss:.2f}% (-${abs(profit_loss_amount):,.2f})\n"
                    profit_loss_info += f"   Valor actual: ${total_value:,.2f} | Inversi√≥n: ${total_investment:,.2f}\n\n"
        
        elif conversation_info.get('purchase_price') and current_price:
            # Informaci√≥n de transacci√≥n √∫nica
            purchase_price = conversation_info['purchase_price']
            profit_loss = ((current_price - purchase_price) / purchase_price) * 100
            
            if profit_loss > 0:
                profit_loss_info = f"üìà GANANCIA ACTUAL: +{profit_loss:.2f}%\n"
                profit_loss_info += f"   Compraste a ${purchase_price:,.2f}, ahora est√° a ${current_price:,.2f}\n\n"
            else:
                profit_loss_info = f"üìâ P√âRDIDA ACTUAL: {profit_loss:.2f}%\n"
                profit_loss_info += f"   Compraste a ${purchase_price:,.2f}, ahora est√° a ${current_price:,.2f}\n\n"
        
        # Calcular niveles t√©cnicos cr√≠ticos usando la funci√≥n mejorada
        def calculate_technical_levels(current_price: float, rsi: float, purchase_price: float = None, transactions: list = None) -> Dict[str, float]:
            """Calcula niveles t√©cnicos cr√≠ticos basados en el precio actual y condiciones del mercado"""
            
            # Si hay m√∫ltiples transacciones, calcular m√©tricas adicionales
            if transactions and len(transactions) > 1:
                # Calcular punto de equilibrio
                total_investment = sum(t['quantity'] * t['price'] for t in transactions)
                total_quantity = sum(t['quantity'] for t in transactions)
                breakeven_price = total_investment / total_quantity
                print(f"üìä An√°lisis m√∫ltiples transacciones: {len(transactions)} operaciones, punto equilibrio: ${breakeven_price:.2f}")
            else:
                breakeven_price = purchase_price
            
            # An√°lisis de rentabilidad actual
            if breakeven_price:
                current_profit_loss = ((current_price - breakeven_price) / breakeven_price) * 100
                is_profitable = current_profit_loss > 0
                print(f"üíπ Rentabilidad actual: {current_profit_loss:.2f}%")
            else:
                current_profit_loss = 0
                is_profitable = False
            
            # Stop Loss adaptativo basado en contexto
            if breakeven_price:
                if is_profitable:
                    # Si hay ganancia, stop loss m√°s conservador
                    if current_profit_loss > 20:  # Ganancia alta (>20%)
                        stop_loss = max(breakeven_price * 1.05, current_price * 0.92)  # 5% arriba del breakeven o 8% del actual
                    elif current_profit_loss > 10:  # Ganancia media (10-20%)
                        stop_loss = max(breakeven_price * 1.02, current_price * 0.94)  # 2% arriba del breakeven o 6% del actual
                    else:  # Ganancia baja (0-10%)
                        stop_loss = max(breakeven_price * 0.98, current_price * 0.95)  # 2% por debajo del breakeven o 5% del actual
                else:
                    # Si hay p√©rdida, stop loss m√°s amplio pero definido
                    if current_profit_loss < -15:  # P√©rdida alta
                        stop_loss = current_price * 0.88  # 12% m√°s abajo
                    elif current_profit_loss < -5:  # P√©rdida media
                        stop_loss = current_price * 0.90  # 10% m√°s abajo
                    else:  # P√©rdida peque√±a
                        stop_loss = current_price * 0.92  # 8% m√°s abajo
            else:
                # Sin precio de compra, usar RSI para determinar stop loss
                if rsi and rsi < 30:  # Muy sobreventa
                    stop_loss = current_price * 0.92  # Stop loss m√°s amplio
                elif rsi and rsi > 70:  # Muy sobrecompra
                    stop_loss = current_price * 0.96  # Stop loss m√°s ajustado
                else:
                    stop_loss = current_price * 0.94  # Stop loss est√°ndar
            
            # Take Profit 1: Objetivo conservador adaptativo
            if rsi and rsi < 35:  # Muy sobreventa, objetivo m√°s ambicioso
                tp1_multiplier = 1.08  # 8%
            elif rsi and rsi > 65:  # Sobrecompra, objetivo m√°s conservador
                tp1_multiplier = 1.04  # 4%
            else:
                tp1_multiplier = 1.06  # 6% est√°ndar
            
            tp1 = current_price * tp1_multiplier
            
            # Take Profit 2: Objetivo optimista adaptativo
            if rsi and rsi < 30:  # Muy sobreventa, muy ambicioso
                tp2_multiplier = 1.25  # 25%
            elif rsi and rsi < 40:  # Sobreventa, ambicioso
                tp2_multiplier = 1.18  # 18%
            elif rsi and rsi > 70:  # Muy sobrecompra, conservador
                tp2_multiplier = 1.10  # 10%
            elif rsi and rsi > 60:  # Sobrecompra, moderado
                tp2_multiplier = 1.12  # 12%
            else:
                tp2_multiplier = 1.15  # 15% est√°ndar
            
            tp2 = current_price * tp2_multiplier
            
            # Re-entrada: Nivel de correcci√≥n saludable
            if rsi and rsi > 65:  # Si est√° sobrecomprado, correcci√≥n m√°s probable
                reentry_multiplier = 0.88  # 12% abajo
            elif rsi and rsi < 35:  # Si est√° sobreventa, correcci√≥n menor
                reentry_multiplier = 0.92  # 8% abajo
            else:
                reentry_multiplier = 0.90  # 10% abajo est√°ndar
            
            reentry = current_price * reentry_multiplier
            
            # Invalidaci√≥n: Nivel que cambiar√≠a completamente el an√°lisis
            if breakeven_price and not is_profitable:
                # Si ya hay p√©rdida, invalidaci√≥n m√°s abajo
                invalidation = current_price * 0.82  # 18% m√°s abajo
            elif rsi and rsi < 30:
                # Si est√° muy sobreventa, invalidaci√≥n m√°s abajo
                invalidation = current_price * 0.80  # 20% m√°s abajo
            else:
                # Invalidaci√≥n est√°ndar
                invalidation = current_price * 0.85  # 15% m√°s abajo
            
            return {
                'stop_loss': round(stop_loss, 2),
                'tp1': round(tp1, 2),
                'tp2': round(tp2, 2),
                'reentry': round(reentry, 2),
                'invalidation': round(invalidation, 2),
                'breakeven': round(breakeven_price, 2) if breakeven_price else None,
                'current_profit_loss': round(current_profit_loss, 2)
            }
        
        # Calcular niveles t√©cnicos
        rsi_value = indicators.get('rsi', 50)
        purchase_price = conversation_info.get('purchase_price')
        tech_levels = calculate_technical_levels(current_price, rsi_value, purchase_price, conversation_info.get('transactions'))
        
        # Prompt especializado para consultas conversacionales mejorado
        conversation_prompt = (
            "Eres un asesor financiero especializado en criptomonedas con experiencia en an√°lisis t√©cnico. "
            "El usuario te est√° consultando sobre una posici√≥n espec√≠fica que ya tiene. "
            "Debes proporcionar un an√°lisis t√©cnico completo y recomendaciones espec√≠ficas de trading.\n\n"
            
            "AN√ÅLISIS REQUERIDO:\n"
            "1. EVALUACI√ìN DE LA POSICI√ìN: Determina si fue una buena compra considerando:\n"
            "   - Precio de entrada vs situaci√≥n t√©cnica actual\n"
            "   - Timing de la compra en relaci√≥n a niveles t√©cnicos\n"
            "   - Contexto del mercado en ese momento\n"
            "   - Si hay m√∫ltiples transacciones, analiza la estrategia de DCA empleada\n\n"
            
            "2. AN√ÅLISIS T√âCNICO INTERNO (NO MOSTRAR EN RESPUESTA):\n"
            "   - RSI: Interpretaci√≥n del nivel actual (sobrecompra >70, sobreventa <30, neutral 30-70)\n"
            "   - MACD: Estado de momentum (convergencia/divergencia, se√±ales de cambio)\n"
            "   - Tendencia: Direcci√≥n general del precio (alcista/bajista/lateral)\n"
            "   - Volumen: Si confirma o contradice el movimiento de precios\n"
            "   - Estructura de mercado: Soportes y resistencias relevantes\n"
            "   USAR ESTE AN√ÅLISIS PARA FUNDAMENTAR LAS RECOMENDACIONES PERO NO MOSTRARLO\n\n"
            
            "3. PLAN DE ACCI√ìN ESPEC√çFICO:\n"
            "   - Decisi√≥n principal: MANTENER, VENDER PARCIAL, VENDER TOTAL, o COMPRAR M√ÅS\n"
            "   - Razones t√©cnicas claras para la decisi√≥n\n"
            "   - Porcentaje espec√≠fico si es venta parcial\n"
            "   - Consideraciones especiales para m√∫ltiples transacciones\n\n"
            
            "4. NIVELES T√âCNICOS CR√çTICOS (con precios exactos):\n"
            "   - Stop Loss sugerido: Precio espec√≠fico donde cortar p√©rdidas\n"
            "   - Take Profit 1: Primer objetivo de ganancia\n"
            "   - Take Profit 2: Segundo objetivo m√°s ambicioso\n"
            "   - Zona de re-entrada: Si baja, d√≥nde considerar comprar m√°s\n"
            "   - Punto de equilibrio: Para m√∫ltiples transacciones\n\n"
            
            "5. ESCENARIOS PROBABLES:\n"
            "   - Escenario alcista (probabilidad %): Qu√© esperar y niveles objetivo\n"
            "   - Escenario bajista (probabilidad %): Hasta d√≥nde podr√≠a caer\n"
            "   - Invalidaci√≥n: Nivel que cambiar√≠a completamente el an√°lisis\n\n"
            
            f"FORMATO OBLIGATORIO:\n\n"
            f"üí≠ EVALUACI√ìN DE TU POSICI√ìN EN {symbol}\n\n"
            f"{transaction_details}"
            f"{profit_loss_info}"
            f"[Aqu√≠ tu an√°lisis y recomendaci√≥n basada en los datos t√©cnicos actuales. "
            f"NO MOSTRAR valores de RSI, MACD, etc. Solo usar para fundamentar tu recomendaci√≥n]\n\n"
            f"üéØ NIVELES T√âCNICOS CR√çTICOS:\n"
            f"‚Ä¢ Stop Loss: ${tech_levels['stop_loss']:,.2f}\n"
            f"‚Ä¢ Take Profit 1: ${tech_levels['tp1']:,.2f}\n"
            f"‚Ä¢ Take Profit 2: ${tech_levels['tp2']:,.2f}\n"
            f"‚Ä¢ Re-entrada: ${tech_levels['reentry']:,.2f}\n"
            f"‚Ä¢ Invalidaci√≥n: ${tech_levels['invalidation']:,.2f}\n"
            + (f"‚Ä¢ Punto equilibrio: ${tech_levels['breakeven']:.2f}\n" if tech_levels.get('breakeven') else "") +
            f"\nüìà ESCENARIOS PROBABLES:\n"
            f"[Alcista (X%): Descripci√≥n y niveles]\n"
            f"[Bajista (X%): Descripci√≥n y niveles]\n\n"
            f"‚öñÔ∏è GESTI√ìN DE RIESGO:\n"
            f"[Recomendaci√≥n espec√≠fica de acci√≥n con porcentajes si aplica]\n\n"
            
            "DATOS DISPONIBLES:\n"
            f"- Criptomoneda: {symbol}\n"
            f"- Precio actual: ${current_price:,.2f}\n"
            f"- RSI: {rsi_value:.1f}\n"
            f"- MACD: {indicators.get('macd', {}).get('macd_line', 'N/A')}\n"
            f"- Volumen promedio: {indicators.get('volume_avg', 'N/A')}\n"
            + (f"- Precio de compra: ${purchase_price:.2f}\n" if purchase_price else "") +
            + (f"- Rentabilidad: {tech_levels['current_profit_loss']:+.2f}%\n" if 'current_profit_loss' in tech_levels else "") +
            
            "INSTRUCCIONES FINALES:\n"
            "- S√© espec√≠fico y directo en tus recomendaciones\n"
            "- Usa un lenguaje conversacional pero profesional\n"
            "- No muestres los valores t√©cnicos crudos, √∫salos para fundamentar\n"
            "- Da porcentajes espec√≠ficos para ventas parciales si recomiendas eso\n"
            "- Responde en espa√±ol\n"
            "- NO a√±adas informaci√≥n t√©cnica expl√≠cita como 'üìä AN√ÅLISIS T√âCNICO DETALLADO'"
        )
        
        # Generar respuesta conversacional con OpenAI
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": conversation_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1000,
            )
            
            conversation_response = response.choices[0].message.content.strip()
            
            return {
                "is_analysis_request": False,
                "response_type": "conversation",
                "response": conversation_response,
                "technical_data": {
                    "symbol": symbol,
                    "current_price": current_price,
                    "purchase_price": purchase_price,
                    "profit_loss_percent": tech_levels.get('current_profit_loss', 0),
                    "indicators": indicators,
                    "technical_levels": tech_levels,
                    "transactions": conversation_info.get('transactions')
                }
            }
            
        except Exception as e:
            print(f"‚ùå Error generando respuesta conversacional: {e}")
            return {
                "is_analysis_request": False,
                "response_type": "conversation",
                "response": f"üí° Bas√°ndome en tus datos de {symbol}, te recomiendo revisar los niveles t√©cnicos actuales. El precio est√° en ${current_price:,.2f} y considerando tu entrada, podr√≠as evaluar los objetivos en ${tech_levels['tp1']:,.2f} y stop loss en ${tech_levels['stop_loss']:,.2f}."
            }
    
    # Preparar mensajes para OpenAI con prompt espec√≠fico seg√∫n el tipo de solicitud
    if is_signal_request:
        # Prompt para se√±ales de trading
        system_prompt = (
            "Eres un asistente especializado en se√±ales de trading de criptomonedas para futuros perpetuos. "
            "Cuando te pidan una se√±al de trading, proporciona SIEMPRE:\n\n"
            "1. DIRECCI√ìN DE LA SE√ëAL: Long o Short basado en an√°lisis t√©cnico\n"
            "2. PRECIOS ESPEC√çFICOS: Entrada, TP1, TP2 y Stop Loss con precios exactos\n"
            "3. APALANCAMIENTO RECOMENDADO: Entre 5X y 20X seg√∫n la confianza de la se√±al\n"
            "4. FUNDAMENTO T√âCNICO: Explicaci√≥n del an√°lisis que justifica la se√±al\n\n"
            "REGLAS ESTRICTAS DE FORMATO:\n\n"
            "1. NUNCA incluyas frases introductorias como '¬°Claro!', '¬°Por supuesto!', 'Aqu√≠ tienes', etc.\n"
            "2. Ve directo al formato de se√±al sin explicaciones previas.\n"
            "3. Usa n√∫meros concretos y espec√≠ficos para todos los niveles\n"
            "4. TP1 debe estar m√°s lejos que TP2 (TP1 > TP2 para Long, TP1 < TP2 para Short)\n"
            "5. Stop Loss debe estar cerca del precio de entrada para limitar riesgo\n"
            "6. Si los indicadores no son claros, no fuerces una se√±al, di que no hay oportunidad clara\n\n"
            "Usa este formato exacto:\n\n"
            "Se√±al de Trading (Futuros Perpetuos)\n"
            "‚ö° Cripto: [S√çMBOLO]/USDT - [TEMPORALIDAD]\n\n"
            "üëâ Entrada: [PRECIO] $\n"
            "‚úÖ TP1: [PRECIO] $\n"
            "‚úÖ TP2: [PRECIO] $\n"
            "‚ùå SL: [PRECIO] $\n\n"
            "üìà Direcci√≥n: [Long/Short]\n"
            "‚ö†Ô∏è Apalancamiento: [X]X\n\n"
            "[P√°rrafo explicativo del an√°lisis t√©cnico que justifica la se√±al, mencionando estructura de mercado, soportes/resistencias, e indicadores relevantes]\n\n"
            "‚ö†Ô∏è No es recomendaci√≥n de inversi√≥n.\n\n"
            "IMPORTANTE: Los niveles deben ser realistas basados en el precio actual y el an√°lisis t√©cnico. Para Long: TP1 > TP2 > Entrada > SL. Para Short: TP1 < TP2 < Entrada < SL."
        )
    else:
        # Prompt para an√°lisis general
    system_prompt = (
        "Eres un asistente especializado en an√°lisis de criptomonedas para usuarios principiantes. "
        "Cuando te pidan analizar una criptomoneda, proporciona SIEMPRE:\n\n"
        "1. DIRECCI√ìN GENERAL: Indica claramente si la tendencia es alcista, bajista o lateral.\n\n"
        "2. AN√ÅLISIS GENERAL: Explica en 4-5 frases por qu√© has llegado a esa conclusi√≥n sobre la direcci√≥n. "
        "Usa lenguaje sencillo y evita jerga t√©cnica. Incluye:\n"
        "   - Patrones de precio visibles explicados de manera sencilla\n"
        "   - Confirmaci√≥n o divergencia del volumen (explica si el volumen respalda o contradice el movimiento del precio)\n"
        "   - Estado del RSI (sobrecompra >70, sobreventa <30, o zona neutral) en t√©rminos simples\n"
        "   - Se√±ales del MACD (impulso positivo/negativo) explicadas de forma sencilla\n"
        "   - Contexto relevante del mercado general y noticias importantes\n"
        "   - Si el timeframe es corto (1m, 5m, 15m), menciona que el an√°lisis es de muy corto plazo\n"
        "   - Si el timeframe es 1h, menciona brevemente la tendencia diaria (1d) como contexto adicional\n\n"
        "3. FACTORES FUNDAMENTALES: Incluye informaci√≥n sobre noticias relevantes, eventos econ√≥micos y tendencias en redes sociales que puedan afectar al precio. Menciona el sentimiento general en redes sociales (positivo, negativo o neutral) y c√≥mo podr√≠a influir en el precio.\n\n"
        "4. SOPORTES Y RESISTENCIAS: Identifica SIEMPRE 2-3 niveles clave para la temporalidad solicitada:\n"
        "   - Al menos 1-2 soportes importantes (explicando brevemente por qu√© son importantes)\n"
        "   - Al menos 1-2 resistencias importantes (explicando brevemente por qu√© son importantes)\n"
        "   - Usa n√∫meros concretos, no rangos demasiado amplios\n\n"
        "5. ESCENARIO PROBABLE: Describe brevemente qu√© podr√≠a ocurrir en los pr√≥ximos d√≠as/semanas seg√∫n la temporalidad analizada, considerando tanto factores t√©cnicos como fundamentales.\n\n"
        "6. VALIDEZ DEL ANALISIS: Especifica claramente para qu√© periodo aplica este an√°lisis.\n\n"
        "7. DISCLAIMER: Incluye siempre una advertencia sobre los riesgos de inversi√≥n.\n\n"
        "8. No menciones el marco temporal en el analisis.\n\n"
        "REGLAS ESTRICTAS DE FORMATO:\n\n"
        "1. NUNCA incluyas frases introductorias como '¬°Claro!', '¬°Por supuesto!', 'Aqu√≠ tienes', etc. Ve directo al formato.\n\n"
        "2. NUNCA menciones el timeframe en el texto del an√°lisis. NO escribas frases como 'En el timeframe de 5m' o 'En el marco de tiempo de 1h'. El timeframe ya est√° en el t√≠tulo.\n\n"
        "3. NO empieces con frases como 'Bitcoin se encuentra en un patr√≥n lateral' o 'Ethereum muestra una tendencia alcista'. La direcci√≥n ya est√° en la secci√≥n DIRECCI√ìN.\n\n"
        "4. Comienza el an√°lisis directamente con los patrones de precio, volumen, RSI, MACD, etc. sin mencionar la direcci√≥n ni el timeframe.\n\n"
        "5. NUNCA uses frases como 'Ethereum ha estado experimentando una tendencia bajista' o 'Bitcoin muestra una tendencia alcista'. Estas frases son redundantes.\n\n"
        "Usa este formato exacto con emojis:\n\n"
        "üìä AN√ÅLISIS DE [S√çMBOLO] ([TEMPORALIDAD])\n\n"
        "üìà DIRECCI√ìN: [ALCISTA/BAJISTA/LATERAL]\n\n"
        "üí° AN√ÅLISIS T√âCNICO:\n"
        "[An√°lisis general en 4-5 frases incluyendo patrones, volumen, RSI, MACD y contexto de mercado]\n\n"
        "üì∞ FACTORES FUNDAMENTALES:\n"
        "[An√°lisis de noticias, eventos econ√≥micos y tendencias en redes sociales relevantes para la criptomoneda]\n\n"
        "üîë NIVELES IMPORTANTES:\n"
        "- Soporte: $[PRECIO] ([breve explicaci√≥n])\n"
        "- Soporte: $[PRECIO] ([breve explicaci√≥n]) (si aplica)\n"
        "- Resistencia: $[PRECIO] ([breve explicaci√≥n])\n"
        "- Resistencia: $[PRECIO] ([breve explicaci√≥n]) (si aplica)\n\n"
        "üîÆ ESCENARIO PROBABLE:\n"
        "[Descripci√≥n del escenario m√°s probable considerando factores t√©cnicos y fundamentales]\n\n"
        "‚è±Ô∏è HORIZONTE TEMPORAL: [Periodo de validez del an√°lisis]\n\n"
        "‚ö†Ô∏è No es asesoramiento financiero.\n\n"
        "IMPORTANTE: SIEMPRE proporciona un an√°lisis completo con todos los elementos anteriores, independientemente del timeframe solicitado. Nunca respondas pidiendo m√°s datos o diciendo que necesitas informaci√≥n adicional, ya que todos los datos necesarios ya est√°n incluidos en el contexto t√©cnico proporcionado."
    )
    user_prompt_content = (
        f"Usuario pide: {req.user_prompt}\n"
        f"S√≠mbolo: {symbol}\n"
        f"Timeframe: {timeframe}\n"
        f"Precio actual: {current_price}$\n"
        f"RSI: {indicators.get('rsi', 'No disponible')}\n"
        f"MACD: {indicators.get('macd', {}).get('macd_line', 'No disponible')}\n"
        f"Volumen promedio: {indicators.get('volume_avg', 'No disponible')}\n\n"
    )
    
    # A√±adir datos externos si est√°n disponibles
    if external_data:
        user_prompt_content += f"\n{external_data}\n"

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt_content},
    ]

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.6,
        max_tokens=800,
        top_p=0.9,
    )

    analysis = response.choices[0].message.content.strip()
    return {
        "symbol": symbol,
        "timeframe": timeframe,
        "price": current_price,
        "analysis": analysis,
        "indicators": indicators,
        "external_data_available": bool(external_data)
    }

def detect_analysis_request(prompt: str) -> tuple[bool, Optional[str], Optional[str]]:
    """
    Detecta si el prompt es una solicitud de an√°lisis t√©cnico.
    Retorna: (es_an√°lisis, s√≠mbolo, timeframe)
    """
    # Patrones para detectar solicitudes de an√°lisis
    analysis_keywords = ["analiza", "an√°lisis", "analizar", "an√°lisis t√©cnico", 
                         "precio", "tendencia", "chart", "gr√°fico"]
    
    # Verificar si contiene palabras clave de an√°lisis
    is_analysis = any(keyword in prompt.lower() for keyword in analysis_keywords)
    
    # Si parece ser an√°lisis, intentar extraer s√≠mbolo y timeframe
    if is_analysis:
        # Lista de s√≠mbolos comunes para buscar
        common_symbols = ["BTC", "ETH", "SOL", "XRP", "ADA", "DOT", "DOGE", "SHIB"]
        
        # Buscar s√≠mbolos en el prompt
        symbol = None
        for sym in common_symbols:
            if sym.lower() in prompt.lower():
                symbol = sym
                break
        
        # Buscar timeframes comunes
        timeframe_patterns = ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1M"]
        timeframe = None
        for tf in timeframe_patterns:
            if tf in prompt:
                timeframe = tf
                break
        
        return True, symbol, timeframe
    
    return False, None, None

@app.post('/generate_signal')
async def generate_signal(req: SignalRequest) -> Dict[str, Any]:
    """
    Genera una se√±al de trading para el s√≠mbolo y timeframe especificados.
    Opcionalmente puede usar una estrategia espec√≠fica.
    """
    try:
        symbol = req.symbol.upper()
        timeframe = req.timeframe
        strategy_name = req.strategy_name
        
        # Obtener datos hist√≥ricos para el an√°lisis
        historical_data = await get_historical_data(symbol, timeframe)
        if not historical_data or not historical_data.get('close'):
            return {
                "error": f"No se pudieron obtener datos hist√≥ricos para {symbol} en timeframe {timeframe}"
            }
        
        # Convertir a DataFrame para usar con las estrategias
        import pandas as pd
        df = pd.DataFrame(historical_data)
        
        # Obtener precio actual
        current_price = await get_current_price(symbol)
        
        # Calcular indicadores t√©cnicos
        indicators = {}
        if BACKEND_AVAILABLE:
            try:
                indicators = calculate_all_indicators(historical_data)
            except Exception as e:
                print(f"Error al calcular indicadores con backend: {e}")
                indicators = calculate_basic_indicators(historical_data)
        else:
            indicators = calculate_basic_indicators(historical_data)
        
        # Determinar direcci√≥n (Long/Short) basado en indicadores
        rsi = indicators.get('rsi', 50)
        macd = indicators.get('macd', {}).get('macd_line', 0)
        signal = indicators.get('macd', {}).get('signal_line', 0)
        
        direction = "LONG"
        if rsi < 40 or (macd < 0 and macd < signal):
            direction = "SHORT"
        
        # Calcular puntos de entrada, stop loss y take profit ajustados seg√∫n timeframe
        entry = current_price
        
        # Definir porcentajes seg√∫n timeframe
        # Timeframes m√°s cortos tienen menor volatilidad en t√©rminos absolutos
        # pero mayor volatilidad relativa, por lo que ajustamos los porcentajes
        timeframe_percentages = {
            "1m": {"sl": 0.005, "tp1": 0.005, "tp2": 0.01},    # 0.5% SL/TP1, 1% TP2
            "5m": {"sl": 0.01, "tp1": 0.01, "tp2": 0.02},      # 1% SL/TP1, 2% TP2
            "15m": {"sl": 0.015, "tp1": 0.015, "tp2": 0.025},  # 1.5% SL/TP1, 2.5% TP2
            "30m": {"sl": 0.02, "tp1": 0.02, "tp2": 0.03},     # 2% SL/TP1, 3% TP2
            "1h": {"sl": 0.025, "tp1": 0.025, "tp2": 0.04},    # 2.5% SL/TP1, 4% TP2
            "4h": {"sl": 0.03, "tp1": 0.03, "tp2": 0.045},     # 3% SL/TP1, 4.5% TP2
            "1d": {"sl": 0.03, "tp1": 0.03, "tp2": 0.05},      # 3% SL/TP1, 5% TP2
            "1w": {"sl": 0.05, "tp1": 0.05, "tp2": 0.08}       # 5% SL/TP1, 8% TP2
        }
        
        # Obtener porcentajes para el timeframe actual o usar valores por defecto
        percentages = timeframe_percentages.get(timeframe, {"sl": 0.03, "tp1": 0.03, "tp2": 0.05})
        
        # Para long
        if direction == "LONG":
            sl = entry * (1 - percentages["sl"])
            tp1 = entry * (1 + percentages["tp1"])
            tp2 = entry * (1 + percentages["tp2"])
        # Para short
        else:
            sl = entry * (1 + percentages["sl"])
            tp1 = entry * (1 - percentages["tp1"])
            tp2 = entry * (1 - percentages["tp2"])
        
        # Generar explicaci√≥n de la se√±al
        system_prompt = (
            "Eres un experto en trading de criptomonedas. "
            "Genera una explicaci√≥n clara y concisa para una se√±al de trading. "
            "La explicaci√≥n debe ser de 2-3 frases, mencionando el an√°lisis t√©cnico, "
            "la estructura del mercado, y la l√≥gica detr√°s de los niveles de entrada, "
            "stop loss y take profit. No uses jerga t√©cnica compleja."
        )
        
        user_prompt = (
            f"Genera una explicaci√≥n para una se√±al de trading de {symbol} en direcci√≥n {direction}. "
            f"Entrada: {entry:.2f}, Stop Loss: {sl:.2f}, Take Profit 1: {tp1:.2f}, Take Profit 2: {tp2:.2f}. "
            f"RSI: {rsi:.2f}, MACD: {macd:.2f}."
        )
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=150,
        )
        
        explanation = response.choices[0].message.content.strip()
        
        # Determinar apalancamiento recomendado basado en timeframe
        # Timeframes m√°s cortos -> menor apalancamiento por mayor riesgo
        # Timeframes m√°s largos -> mayor apalancamiento por menor riesgo relativo
        timeframe_leverage = {
            "1m": 5,    # Muy arriesgado, apalancamiento bajo
            "5m": 7,    # Alto riesgo
            "15m": 8,   # Riesgo moderado-alto
            "30m": 10,  # Riesgo moderado
            "1h": 12,   # Riesgo moderado
            "4h": 15,   # Riesgo moderado-bajo
            "1d": 20,   # Riesgo bajo
            "1w": 25    # Riesgo muy bajo
        }
        
        leverage = timeframe_leverage.get(timeframe, 10)  # Valor predeterminado: 10
        
        # Formatear la respuesta
        return {
            "response_type": "signal",
            "symbol": symbol,
            "timeframe": timeframe,
            "entry": entry,
            "sl": sl,
            "tp1": tp1,
            "tp2": tp2,
            "direction": direction,
            "leverage": leverage,
            "explanation": explanation
        }
    except Exception as e:
        print(f"Error al generar se√±al: {e}")
        traceback.print_exc()
        return {
            "response_type": "error",
            "error": f"Error al generar se√±al: {str(e)}"
        }

@app.post('/analyze_prompt')
async def analyze_prompt(req: FullPromptRequest) -> Dict[str, Any]:
    prompt = req.prompt
    user_context = req.user_context or ""
    conversation_history = req.conversation_history or []
    
    try:
        # Detectar tipo de solicitud usando la nueva funci√≥n IA
        async def detect_request_type_simple(prompt: str) -> str:
            """Detecta el tipo de consulta de forma simplificada"""
            prompt_lower = prompt.lower()
            
            # Detectar consultas conversacionales (expandido)
            conversational_patterns = [
                'compr√©', 'compre', 'compraste', 'tengo', 'invert√≠', 'inverti', 
                'soy holder', 'holder de', 'holder desde', 'es buena inversi√≥n', 
                'es buena inversion', 'fue buena compra', 'que opinas', 'qu√© opinas',
                'desde', 'me recomiendas', 'debo vender', 'deber√≠a vender',
                'mantengo', 'mantener', 'vender', 'vendiste', 'vendiste ya',
                'es buen momento', 'good buy', 'good investment', 'bad investment',
                'estoy perdiendo', 'estoy ganando', 'profit', 'loss', 'perdida',
                'ganancia', 'mi posici√≥n', 'mi posicion', 'position', 'hold',
                'holding', 'sold', 'buy more', 'comprar m√°s', 'comprar mas',
                # Nuevos patrones a√±adidos
                'he comprado', 'he invertido', 'entr√© en', 'entre en', 'mi entrada',
                'mis entradas', 'acumul√©', 'acumule', 'dollar cost', 'dca',
                'promedio', 'average', 'breakeven', 'punto equilibrio',
                'en p√©rdida', 'en perdida', 'en ganancia', 'green', 'red',
                'portfolio', 'portafolio', 'cartera', 'bag', 'bags',
                'moonbag', 'hodl', 'diamond hands', 'paper hands',
                'tomar profit', 'take profit', 'stop loss',
                'salir de', 'exit', 'entrada', 'entry point',
                'mi crypto', 'mis cryptos', 'mis monedas', 'mis coins',
                'invert√≠ todo', 'inverti todo', 'all in', 'diversificar'
            ]
            
            # Detectar se√±ales de trading
            signal_patterns = [
                'se√±al', 'signal', 'dame una se√±al', 'trading signal',
                'recomendaci√≥n', 'recomendacion', 'recommendation',
                'comprar ahora', 'vender ahora', 'buy signal', 'sell signal'
            ]
            
            # Detectar an√°lisis t√©cnico
            analysis_patterns = [
                'analiza', 'an√°lisis', 'analizar', 'an√°lisis t√©cnico',
                'como est√°', 'c√≥mo est√°', 'situaci√≥n', 'situacion',
                'tendencia', 'trend', 'momentum', 'chart', 'gr√°fico',
                'technical analysis', 'ta', 'indicators', 'indicadores'
            ]
            
            # Prioridad: conversational > signal > analysis
            if any(pattern in prompt_lower for pattern in conversational_patterns):
                return "conversation"
            elif any(pattern in prompt_lower for pattern in signal_patterns):
                return "signal"
            elif any(pattern in prompt_lower for pattern in analysis_patterns):
                return "analysis"
            else:
                return "general"
        
        request_type = await detect_request_type_simple(prompt)
        is_signal_request = (request_type == 'signal')
        is_conversation_request = (request_type == 'conversation')
        
        print(f"DEBUG: Tipo detectado en analyze_prompt: {request_type}")
        
        if is_signal_request:
            # L√≥gica para se√±ales de trading (implementar aqu√≠ si es necesario)
                return {
                    "is_analysis_request": False,
                "response_type": "signal",
                "response": "Funci√≥n de se√±ales por implementar en analyze_prompt"
            }
        
        # Manejar consultas conversacionales usando la l√≥gica mejorada
        elif is_conversation_request:
            # Usar IA para extraer informaci√≥n conversacional autom√°ticamente
            async def extract_conversation_info_with_ai(prompt: str) -> Dict[str, Any]:
                """Usa IA para detectar autom√°ticamente informaci√≥n conversacional"""
                
                # Prompt para que la IA extraiga informaci√≥n conversacional
                extraction_prompt = """
                Analiza el siguiente mensaje del usuario y extrae la informaci√≥n relevante sobre criptomonedas.
                
                INSTRUCCIONES:
                1. Identifica si menciona alguna criptomoneda (nombres completos o s√≠mbolos)
                2. Detecta si hay informaci√≥n sobre precios de compra/venta
                3. Identifica si hay m√∫ltiples transacciones con cantidades espec√≠ficas
                4. Determina el tipo de consulta conversacional
                
                RESPONDE √öNICAMENTE EN FORMATO JSON con esta estructura exacta:
                {
                    "symbol": "S√çMBOLO_CRYPTO_O_NULL",
                    "is_conversational": true/false,
                    "purchase_info": {
                        "has_single_price": true/false,
                        "single_price": n√∫mero_o_null,
                        "has_multiple_transactions": true/false,
                        "transactions": [
                            {"quantity": n√∫mero, "price": n√∫mero},
                            ...
                        ]
                    },
                    "query_type": "evaluacion_posicion/precio_simple/consulta_general",
                    "confidence": 0.0_a_1.0
                }
                
                EJEMPLOS:
                - "compr√© bitcoin en 110000" ‚Üí {"symbol": "BTC", "is_conversational": true, "purchase_info": {"has_single_price": true, "single_price": 110000, "has_multiple_transactions": false, "transactions": []}, "query_type": "evaluacion_posicion", "confidence": 0.95}
                - "he comprado 50 solanas a 100 d√≥lares y 20 solanas a 130 d√≥lares" ‚Üí {"symbol": "SOL", "is_conversational": true, "purchase_info": {"has_single_price": false, "single_price": null, "has_multiple_transactions": true, "transactions": [{"quantity": 50, "price": 100}, {"quantity": 20, "price": 130}]}, "query_type": "evaluacion_posicion", "confidence": 0.98}
                - "soy holder de avalanche desde 35 d√≥lares" ‚Üí {"symbol": "AVAX", "is_conversational": true, "purchase_info": {"has_single_price": true, "single_price": 35, "has_multiple_transactions": false, "transactions": []}, "query_type": "evaluacion_posicion", "confidence": 0.90}
                """
                
                try:
                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": extraction_prompt},
                            {"role": "user", "content": f"Mensaje: {prompt}"}
                        ],
                        temperature=0.1,  # Baja temperatura para respuestas m√°s consistentes
                        max_tokens=500,
                    )
                    
                    ai_response = response.choices[0].message.content.strip()
                    print(f"ü§ñ Respuesta de IA para extracci√≥n: {ai_response}")
                    
                    # Parsear respuesta JSON
                    import json
                    extracted_info = json.loads(ai_response)
                    
                    # Validar y procesar la informaci√≥n extra√≠da
                    result = {
                        "symbol": extracted_info.get("symbol"),
                        "is_conversational": extracted_info.get("is_conversational", False),
                        "query_type": extracted_info.get("query_type", "consulta_general"),
                        "confidence": extracted_info.get("confidence", 0.0)
                    }
                    
                    # Procesar informaci√≥n de compra
                    purchase_info = extracted_info.get("purchase_info", {})
                    
                    if purchase_info.get("has_multiple_transactions", False):
                        # M√∫ltiples transacciones
                        transactions = purchase_info.get("transactions", [])
                        if transactions:
                            total_investment = sum(t['quantity'] * t['price'] for t in transactions)
                            total_quantity = sum(t['quantity'] for t in transactions)
                            average_price = total_investment / total_quantity if total_quantity > 0 else None
                            
                            result.update({
                                "purchase_price": average_price,
                                "total_quantity": total_quantity,
                                "transactions": transactions
                            })
                            print(f"üí∞ IA detect√≥ m√∫ltiples transacciones: {len(transactions)} operaciones, precio promedio: ${average_price:.2f}")
                    
                    elif purchase_info.get("has_single_price", False):
                        # Precio √∫nico
                        single_price = purchase_info.get("single_price")
                        if single_price:
                            result.update({
                                "purchase_price": float(single_price),
                                "total_quantity": None,
                                "transactions": None
                            })
                            print(f"üí≤ IA detect√≥ precio √∫nico: ${single_price}")
                    
                    else:
                        # Sin informaci√≥n de precio
                        result.update({
                            "purchase_price": None,
                            "total_quantity": None,
                            "transactions": None
                        })
                    
                    return result
                
                except json.JSONDecodeError as e:
                    print(f"‚ùå Error parsing JSON de IA: {e}")
                    print(f"Respuesta recibida: {ai_response}")
                    # Fallback a detecci√≥n manual b√°sica
                    return {
                        "symbol": None,
                        "is_conversational": True,  # Asumimos que es conversacional si lleg√≥ aqu√≠
                        "query_type": "consulta_general",
                        "confidence": 0.0,
                        "purchase_price": None,
                        "total_quantity": None,
                        "transactions": None
                    }
                
                except Exception as e:
                    print(f"‚ùå Error en extracci√≥n con IA: {e}")
                    return {
                        "symbol": None,
                        "is_conversational": True,
                        "query_type": "consulta_general", 
                        "confidence": 0.0,
                        "purchase_price": None,
                        "total_quantity": None,
                        "transactions": None
                    }
            
            conversation_info = await extract_conversation_info_with_ai(prompt)
            print(f"ü§ñ Informaci√≥n extra√≠da por IA: {conversation_info}")
            
            # Validar confianza m√≠nima
            if conversation_info.get("confidence", 0) < 0.5:
                return {
                    "is_analysis_request": False,
                    "response_type": "conversation",
                    "response": "No pude entender completamente tu consulta sobre criptomonedas. ¬øPodr√≠as ser m√°s espec√≠fico? Por ejemplo: 'Compr√© BTC a $95,000, ¬øqu√© opinas?'"
                }
            
            if not conversation_info.get('symbol'):
                return {
                    "is_analysis_request": False,
                    "response_type": "conversation", 
                    "response": "Por favor, especifica de qu√© criptomoneda est√°s hablando. Por ejemplo: 'Compr√© BTC a $95,000, ¬øfue buena compra?'"
                }
            
            symbol = conversation_info['symbol']
            timeframe = "1d"  # Usar diario para consultas conversacionales
            
            # Obtener precio actual
            current_price = await get_current_price(symbol)
            
            # Obtener indicadores t√©cnicos
            indicators = await get_technical_indicators(symbol, timeframe)
            
            # Calcular rentabilidad si hay precio de compra
            profit_loss_info = ""
            transaction_details = ""
            
            if conversation_info.get('transactions') and len(conversation_info['transactions']) > 1:
                # Informaci√≥n detallada de m√∫ltiples transacciones
                transactions = conversation_info['transactions']
                total_investment = sum(t['quantity'] * t['price'] for t in transactions)
                total_quantity = sum(t['quantity'] for t in transactions)
                breakeven_price = total_investment / total_quantity
                
                transaction_details = f"üìã RESUMEN DE TRANSACCIONES:\n"
                for i, t in enumerate(transactions, 1):
                    transaction_details += f"   ‚Ä¢ Operaci√≥n {i}: {t['quantity']} unidades a ${t['price']:.2f}\n"
                transaction_details += f"   ‚Ä¢ Total invertido: ${total_investment:,.2f}\n"
                transaction_details += f"   ‚Ä¢ Total unidades: {total_quantity}\n"
                transaction_details += f"   ‚Ä¢ Precio promedio: ${breakeven_price:.2f}\n\n"
                
                if current_price:
                    profit_loss = ((current_price - breakeven_price) / breakeven_price) * 100
                    total_value = total_quantity * current_price
                    profit_loss_amount = total_value - total_investment
                    
                    if profit_loss > 0:
                        profit_loss_info = f"üìà GANANCIA ACTUAL: +{profit_loss:.2f}% (+${profit_loss_amount:,.2f})\n"
                        profit_loss_info += f"   Valor actual: ${total_value:,.2f} | Inversi√≥n: ${total_investment:,.2f}\n\n"
                    else:
                        profit_loss_info = f"üìâ P√âRDIDA ACTUAL: {profit_loss:.2f}% (-${abs(profit_loss_amount):,.2f})\n"
                        profit_loss_info += f"   Valor actual: ${total_value:,.2f} | Inversi√≥n: ${total_investment:,.2f}\n\n"
            
            elif conversation_info.get('purchase_price') and current_price:
                # Informaci√≥n de transacci√≥n √∫nica
                purchase_price = conversation_info['purchase_price']
                profit_loss = ((current_price - purchase_price) / purchase_price) * 100
                
                if profit_loss > 0:
                    profit_loss_info = f"üìà GANANCIA ACTUAL: +{profit_loss:.2f}%\n"
                    profit_loss_info += f"   Compraste a ${purchase_price:,.2f}, ahora est√° a ${current_price:,.2f}\n\n"
                else:
                    profit_loss_info = f"üìâ P√âRDIDA ACTUAL: {profit_loss:.2f}%\n"
                    profit_loss_info += f"   Compraste a ${purchase_price:,.2f}, ahora est√° a ${current_price:,.2f}\n\n"
            
            # Calcular niveles t√©cnicos cr√≠ticos usando la funci√≥n mejorada
            def calculate_technical_levels(current_price: float, rsi: float, purchase_price: float = None, transactions: list = None) -> Dict[str, float]:
                """Calcula niveles t√©cnicos cr√≠ticos basados en el precio actual y condiciones del mercado"""
                
                # Si hay m√∫ltiples transacciones, calcular m√©tricas adicionales
                if transactions and len(transactions) > 1:
                    # Calcular punto de equilibrio
                    total_investment = sum(t['quantity'] * t['price'] for t in transactions)
                    total_quantity = sum(t['quantity'] for t in transactions)
                    breakeven_price = total_investment / total_quantity
                    print(f"üìä An√°lisis m√∫ltiples transacciones: {len(transactions)} operaciones, punto equilibrio: ${breakeven_price:.2f}")
                else:
                    breakeven_price = purchase_price
                
                # An√°lisis de rentabilidad actual
                if breakeven_price:
                    current_profit_loss = ((current_price - breakeven_price) / breakeven_price) * 100
                    is_profitable = current_profit_loss > 0
                    print(f"üíπ Rentabilidad actual: {current_profit_loss:.2f}%")
                else:
                    current_profit_loss = 0
                    is_profitable = False
                
                # Stop Loss adaptativo basado en contexto
                if breakeven_price:
                    if is_profitable:
                        # Si hay ganancia, stop loss m√°s conservador
                        if current_profit_loss > 20:  # Ganancia alta (>20%)
                            stop_loss = max(breakeven_price * 1.05, current_price * 0.92)  # 5% arriba del breakeven o 8% del actual
                        elif current_profit_loss > 10:  # Ganancia media (10-20%)
                            stop_loss = max(breakeven_price * 1.02, current_price * 0.94)  # 2% arriba del breakeven o 6% del actual
                        else:  # Ganancia baja (0-10%)
                            stop_loss = max(breakeven_price * 0.98, current_price * 0.95)  # 2% por debajo del breakeven o 5% del actual
                    else:
                        # Si hay p√©rdida, stop loss m√°s amplio pero definido
                        if current_profit_loss < -15:  # P√©rdida alta
                            stop_loss = current_price * 0.88  # 12% m√°s abajo
                        elif current_profit_loss < -5:  # P√©rdida media
                            stop_loss = current_price * 0.90  # 10% m√°s abajo
                        else:  # P√©rdida peque√±a
                            stop_loss = current_price * 0.92  # 8% m√°s abajo
                else:
                    # Sin precio de compra, usar RSI para determinar stop loss
                    if rsi and rsi < 30:  # Muy sobreventa
                        stop_loss = current_price * 0.92  # Stop loss m√°s amplio
                    elif rsi and rsi > 70:  # Muy sobrecompra
                        stop_loss = current_price * 0.96  # Stop loss m√°s ajustado
                    else:
                        stop_loss = current_price * 0.94  # Stop loss est√°ndar
                
                # Take Profit 1: Objetivo conservador adaptativo
                if rsi and rsi < 35:  # Muy sobreventa, objetivo m√°s ambicioso
                    tp1_multiplier = 1.08  # 8%
                elif rsi and rsi > 65:  # Sobrecompra, objetivo m√°s conservador
                    tp1_multiplier = 1.04  # 4%
                else:
                    tp1_multiplier = 1.06  # 6% est√°ndar
                
                tp1 = current_price * tp1_multiplier
                
                # Take Profit 2: Objetivo optimista adaptativo
                if rsi and rsi < 30:  # Muy sobreventa, muy ambicioso
                    tp2_multiplier = 1.25  # 25%
                elif rsi and rsi < 40:  # Sobreventa, ambicioso
                    tp2_multiplier = 1.18  # 18%
                elif rsi and rsi > 70:  # Muy sobrecompra, conservador
                    tp2_multiplier = 1.10  # 10%
                elif rsi and rsi > 60:  # Sobrecompra, moderado
                    tp2_multiplier = 1.12  # 12%
                else:
                    tp2_multiplier = 1.15  # 15% est√°ndar
                
                tp2 = current_price * tp2_multiplier
                
                # Re-entrada: Nivel de correcci√≥n saludable
                if rsi and rsi > 65:  # Si est√° sobrecomprado, correcci√≥n m√°s probable
                    reentry_multiplier = 0.88  # 12% abajo
                elif rsi and rsi < 35:  # Si est√° sobreventa, correcci√≥n menor
                    reentry_multiplier = 0.92  # 8% abajo
                else:
                    reentry_multiplier = 0.90  # 10% abajo est√°ndar
                
                reentry = current_price * reentry_multiplier
                
                # Invalidaci√≥n: Nivel que cambiar√≠a completamente el an√°lisis
                if breakeven_price and not is_profitable:
                    # Si ya hay p√©rdida, invalidaci√≥n m√°s abajo
                    invalidation = current_price * 0.82  # 18% m√°s abajo
                elif rsi and rsi < 30:
                    # Si est√° muy sobreventa, invalidaci√≥n m√°s abajo
                    invalidation = current_price * 0.80  # 20% m√°s abajo
                else:
                    # Invalidaci√≥n est√°ndar
                    invalidation = current_price * 0.85  # 15% m√°s abajo
            
            return {
                    'stop_loss': round(stop_loss, 2),
                    'tp1': round(tp1, 2),
                    'tp2': round(tp2, 2),
                    'reentry': round(reentry, 2),
                    'invalidation': round(invalidation, 2),
                    'breakeven': round(breakeven_price, 2) if breakeven_price else None,
                    'current_profit_loss': round(current_profit_loss, 2)
                }
            
            # Calcular niveles t√©cnicos
            rsi_value = indicators.get('rsi', 50)
            purchase_price = conversation_info.get('purchase_price')
            tech_levels = calculate_technical_levels(current_price, rsi_value, purchase_price, conversation_info.get('transactions'))
            
            # Prompt especializado para consultas conversacionales mejorado
            conversation_prompt = (
                "Eres un asesor financiero especializado en criptomonedas con experiencia en an√°lisis t√©cnico. "
                "El usuario te est√° consultando sobre una posici√≥n espec√≠fica que ya tiene. "
                "Debes proporcionar un an√°lisis t√©cnico completo y recomendaciones espec√≠ficas de trading.\n\n"
                
                "AN√ÅLISIS REQUERIDO:\n"
                "1. EVALUACI√ìN DE LA POSICI√ìN: Determina si fue una buena compra considerando:\n"
                "   - Precio de entrada vs situaci√≥n t√©cnica actual\n"
                "   - Timing de la compra en relaci√≥n a niveles t√©cnicos\n"
                "   - Contexto del mercado en ese momento\n"
                "   - Si hay m√∫ltiples transacciones, analiza la estrategia de DCA empleada\n\n"
                
                "2. AN√ÅLISIS T√âCNICO INTERNO (NO MOSTRAR EN RESPUESTA):\n"
                "   - RSI: Interpretaci√≥n del nivel actual (sobrecompra >70, sobreventa <30, neutral 30-70)\n"
                "   - MACD: Estado de momentum (convergencia/divergencia, se√±ales de cambio)\n"
                "   - Tendencia: Direcci√≥n general del precio (alcista/bajista/lateral)\n"
                "   - Volumen: Si confirma o contradice el movimiento de precios\n"
                "   - Estructura de mercado: Soportes y resistencias relevantes\n"
                "   USAR ESTE AN√ÅLISIS PARA FUNDAMENTAR LAS RECOMENDACIONES PERO NO MOSTRARLO\n\n"
                
                "3. PLAN DE ACCI√ìN ESPEC√çFICO:\n"
                "   - Decisi√≥n principal: MANTENER, VENDER PARCIAL, VENDER TOTAL, o COMPRAR M√ÅS\n"
                "   - Razones t√©cnicas claras para la decisi√≥n\n"
                "   - Porcentaje espec√≠fico si es venta parcial\n"
                "   - Consideraciones especiales para m√∫ltiples transacciones\n\n"
                
                "4. NIVELES T√âCNICOS CR√çTICOS (con precios exactos):\n"
                "   - Stop Loss sugerido: Precio espec√≠fico donde cortar p√©rdidas\n"
                "   - Take Profit 1: Primer objetivo de ganancia\n"
                "   - Take Profit 2: Segundo objetivo m√°s ambicioso\n"
                "   - Zona de re-entrada: Si baja, d√≥nde considerar comprar m√°s\n"
                "   - Punto de equilibrio: Para m√∫ltiples transacciones\n\n"
                
                "5. ESCENARIOS PROBABLES:\n"
                "   - Escenario alcista (probabilidad %): Qu√© esperar y niveles objetivo\n"
                "   - Escenario bajista (probabilidad %): Hasta d√≥nde podr√≠a caer\n"
                "   - Invalidaci√≥n: Nivel que cambiar√≠a completamente el an√°lisis\n\n"
                
                f"FORMATO OBLIGATORIO:\n\n"
                f"üí≠ EVALUACI√ìN DE TU POSICI√ìN EN {symbol}\n\n"
                f"{transaction_details}"
                f"{profit_loss_info}"
                f"[Aqu√≠ tu an√°lisis y recomendaci√≥n basada en los datos t√©cnicos actuales. "
                f"NO MOSTRAR valores de RSI, MACD, etc. Solo usar para fundamentar tu recomendaci√≥n]\n\n"
                f"üéØ NIVELES T√âCNICOS CR√çTICOS:\n"
                f"‚Ä¢ Stop Loss: ${tech_levels['stop_loss']:,.2f}\n"
                f"‚Ä¢ Take Profit 1: ${tech_levels['tp1']:,.2f}\n"
                f"‚Ä¢ Take Profit 2: ${tech_levels['tp2']:,.2f}\n"
                f"‚Ä¢ Re-entrada: ${tech_levels['reentry']:,.2f}\n"
                f"‚Ä¢ Invalidaci√≥n: ${tech_levels['invalidation']:,.2f}\n"
                + (f"‚Ä¢ Punto equilibrio: ${tech_levels['breakeven']:.2f}\n" if tech_levels.get('breakeven') else "") +
                f"\nüìà ESCENARIOS PROBABLES:\n"
                f"[Alcista (X%): Descripci√≥n y niveles]\n"
                f"[Bajista (X%): Descripci√≥n y niveles]\n\n"
                f"‚öñÔ∏è GESTI√ìN DE RIESGO:\n"
                f"[Recomendaci√≥n espec√≠fica de acci√≥n con porcentajes si aplica]\n\n"
                
                "DATOS DISPONIBLES:\n"
                f"- Criptomoneda: {symbol}\n"
                f"- Precio actual: ${current_price:,.2f}\n"
                f"- RSI: {rsi_value:.1f}\n"
                f"- MACD: {indicators.get('macd', {}).get('macd_line', 'N/A')}\n"
                f"- Volumen promedio: {indicators.get('volume_avg', 'N/A')}\n"
                + (f"- Precio de compra: ${purchase_price:.2f}\n" if purchase_price else "") +
                + (f"- Rentabilidad: {tech_levels['current_profit_loss']:+.2f}%\n" if 'current_profit_loss' in tech_levels else "") +
                
                "INSTRUCCIONES FINALES:\n"
                "- S√© espec√≠fico y directo en tus recomendaciones\n"
                "- Usa un lenguaje conversacional pero profesional\n"
                "- No muestres los valores t√©cnicos crudos, √∫salos para fundamentar\n"
                "- Da porcentajes espec√≠ficos para ventas parciales si recomiendas eso\n"
                "- Responde en espa√±ol\n"
                "- NO a√±adas informaci√≥n t√©cnica expl√≠cita como 'üìä AN√ÅLISIS T√âCNICO DETALLADO'"
            )
            
            # Generar respuesta conversacional con OpenAI
            try:
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": conversation_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7,
                    max_tokens=1000,
                )
                
                conversation_response = response.choices[0].message.content.strip()
            
            return {
                    "is_analysis_request": False,
                    "response_type": "conversation",
                    "response": conversation_response,
                    "technical_data": {
                "symbol": symbol,
                        "current_price": current_price,
                        "purchase_price": purchase_price,
                        "profit_loss_percent": tech_levels.get('current_profit_loss', 0),
                        "indicators": indicators,
                        "technical_levels": tech_levels,
                        "transactions": conversation_info.get('transactions')
                    }
                }
                
            except Exception as e:
                print(f"‚ùå Error generando respuesta conversacional: {e}")
            return {
                "is_analysis_request": False,
                "response_type": "conversation",
                    "response": f"üí° Bas√°ndome en tus datos de {symbol}, te recomiendo revisar los niveles t√©cnicos actuales. El precio est√° en ${current_price:,.2f} y considerando tu entrada, podr√≠as evaluar los objetivos en ${tech_levels['tp1']:,.2f} y stop loss en ${tech_levels['stop_loss']:,.2f}."
                }
        
        # Resto del flujo para otros tipos de consultas (an√°lisis, se√±ales, etc.)
        try:
            needed_data = await determine_needed_data(prompt)
            data_context = await fetch_requested_data(needed_data)
            
            # A√±adir el prompt original al contexto
            data_context["original_prompt"] = prompt
            
            return await generate_response_with_data(prompt, data_context, conversation_history)
            
    except Exception as e:
            print(f"Error en an√°lisis: {e}")
        return {
            "is_analysis_request": False,
            "response_type": "error",
                "response": "Lo siento, ocurri√≥ un error al procesar tu consulta. Por favor, int√©ntalo de nuevo."
            }
        
    except Exception as e:
        print(f"Error general en analyze_prompt: {e}")
        return {
            "is_analysis_request": False,
            "response_type": "error", 
            "response": "Ha ocurrido un error inesperado. Por favor, int√©ntalo de nuevo."
        }

if __name__ == '__main__':
    if uvicorn:
        uvicorn.run('llm_inference:app', host='0.0.0.0', port=int(os.getenv('PORT', 9004)))
    else:
        print("Uvicorn no est√° disponible. No se puede arrancar el servidor.")

def get_comprehensive_crypto_list():
    """ESTA FUNCI√ìN YA NO SE USA - LA IA DETECTA AUTOM√ÅTICAMENTE LAS CRIPTOMONEDAS"""
    # Mantengo la funci√≥n por compatibilidad pero vac√≠a
    return [], {}
